/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"
#include "xpt2046.h"
#include <stdint.h>
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);

void birincibolge();
void ikincibolge();
void ucuncubolge();
void dorduncubolge();
/* USER CODE BEGIN PFP */
uint16_t touchX, touchY;
int score=0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void FirstRegion(){
	ILI9341_FillScreen(RED);
  	// Horizontal Line (X, Y, Length, Color)
  	ILI9341_DrawVLine(160, 0, 240, WHITE);
   	// Hollow Circle (Centre X, Centre Y, Radius, Color)
   	ILI9341_DrawHollowCircle(80, 120, 40, BLUE);  // SOL UST
 	// Hollow Rectangle (Start X, Start Y, End X, End Y)
   	ILI9341_DrawHollowRectangleCoord(200, 100, 280,140, YELLOW); // SAG UST

   	HAL_Delay(100);

  	while(1){
  		touchX = getX();
  		touchY = getY();

 		if(touchX<160 && touchX != 0){
			ILI9341_DrawText("Dogru", FONT4, 130, 120, BLACK, WHITE);
 			HAL_Delay(150);
			score+=1;
			break;
		}
		if(touchX>160 && touchX != 0){
		    ILI9341_DrawText("Yanlis", FONT4, 130, 120, BLACK, WHITE);
		    HAL_Delay(150);
	   	    break;
		}

  	}

  	ILI9341_FillScreen(RED);
  	// Horizontal Line (X, Y, Length, Color)
  	ILI9341_DrawHLine(0, 120, 320, WHITE);
  	// Vertical Line (X, Y, Length, Color)
  	ILI9341_DrawVLine(160, 0, 240, WHITE);

  	// Hollow Circle (Centre X, Centre Y, Radius, Color)
  	ILI9341_DrawFilledCircle(80, 60, 40, BLUE);  // SOL UST

  	// Hollow Rectangle (Start X, Start Y, End X, End Y)
  	ILI9341_DrawFilledRectangleCoord(200, 40, 280, 80, YELLOW); // SAG UST

  	// Hollow Circle (Centre X, Centre Y, Radius, Color)
  	ILI9341_DrawHollowCircle(80,180, 40, NAVY);  // SOL ALT

  	 // Hollow Rectangle (Start X, Start Y, End X, End Y)
   	ILI9341_DrawHollowRectangleCoord(200, 160, 280, 200, ORANGE); // SAG ALT
}

void SecondRegion(){
	ILI9341_FillScreen(RED);
  	// Horizontal Line (X, Y, Length, Color)
  	ILI9341_DrawVLine(160, 0, 240, WHITE);
   	// Hollow Circle (Centre X, Centre Y, Radius, Color)
   	ILI9341_DrawHollowCircle(80, 120, 40, BLUE);  // SOL UST
 	// Hollow Rectangle (Start X, Start Y, End X, End Y)
   	ILI9341_DrawHollowRectangleCoord(200, 100, 280,140, YELLOW); // SAG UST

   	HAL_Delay(100);

  	while(1){
  		touchX = getX();
  		touchY = getY();

 		if(touchX>160 && touchX != 0){
			ILI9341_DrawText("Dogru", FONT4, 130, 120, BLACK, WHITE);
 			HAL_Delay(150);
			score+=1;
			break;
		}
		if(touchX<160 && touchX != 0){
		    ILI9341_DrawText("Yanlis", FONT4, 130, 120, BLACK, WHITE);
		    HAL_Delay(150);
	   	    break;
		}

  	}

  	ILI9341_FillScreen(RED);
  	// Horizontal Line (X, Y, Length, Color)
  	ILI9341_DrawHLine(0, 120, 320, WHITE);
  	// Vertical Line (X, Y, Length, Color)
  	ILI9341_DrawVLine(160, 0, 240, WHITE);

  	// Hollow Circle (Centre X, Centre Y, Radius, Color)
  	ILI9341_DrawFilledCircle(80, 60, 40, BLUE);  // SOL UST

  	// Hollow Rectangle (Start X, Start Y, End X, End Y)
  	ILI9341_DrawFilledRectangleCoord(200, 40, 280, 80, YELLOW); // SAG UST

  	// Hollow Circle (Centre X, Centre Y, Radius, Color)
  	ILI9341_DrawHollowCircle(80,180, 40, NAVY);  // SOL ALT

  	// Hollow Rectangle (Start X, Start Y, End X, End Y)
   	ILI9341_DrawHollowRectangleCoord(200, 160, 280, 200, ORANGE); // SAG ALT
}


void ThirdRegion(){
	ILI9341_FillScreen(RED);
  	// Horizontal Line (X, Y, Length, Color)
  	ILI9341_DrawVLine(160, 0, 240, WHITE);
   	// Hollow Circle (Centre X, Centre Y, Radius, Color)
   	ILI9341_DrawFilledCircle(80, 120, 40, BLUE);  // SOL UST
 	// Hollow Rectangle (Start X, Start Y, End X, End Y)
   	ILI9341_DrawFilledRectangleCoord(200, 100, 280,140, YELLOW); // SAG UST

   	HAL_Delay(100);

  	while(1){
  		touchX = getX();
  		touchY = getY();

 		if(touchX<160 && touchX != 0){
			ILI9341_DrawText("Dogru", FONT4, 130, 120, BLACK, WHITE);
 			HAL_Delay(150);
			score+=1;
			break;
		}
		if(touchX>160 && touchX != 0){
		    ILI9341_DrawText("Yanlis", FONT4, 130, 120, BLACK, WHITE);
		    HAL_Delay(150);
	   	    break;
		}

  	}

  	ILI9341_FillScreen(RED);
  	// Horizontal Line (X, Y, Length, Color)
  	ILI9341_DrawHLine(0, 120, 320, WHITE);
  	// Vertical Line (X, Y, Length, Color)
  	ILI9341_DrawVLine(160, 0, 240, WHITE);

  	// Hollow Circle (Centre X, Centre Y, Radius, Color)
  	ILI9341_DrawFilledCircle(80, 60, 40, BLUE);  // SOL UST

  	// Hollow Rectangle (Start X, Start Y, End X, End Y)
  	ILI9341_DrawFilledRectangleCoord(200, 40, 280, 80, YELLOW); // SAG UST

  	// Hollow Circle (Centre X, Centre Y, Radius, Color)
  	ILI9341_DrawHollowCircle(80,180, 40, NAVY);  // SOL ALT

  	// Hollow Rectangle (Start X, Start Y, End X, End Y)
   	ILI9341_DrawHollowRectangleCoord(200, 160, 280, 200, ORANGE); // SAG ALT
}

void FourthRegion(){
	ILI9341_FillScreen(RED);
  	// Horizontal Line (X, Y, Length, Color)
  	ILI9341_DrawVLine(160, 0, 240, WHITE);
   	// Hollow Circle (Centre X, Centre Y, Radius, Color)
   	ILI9341_DrawFilledCircle(80, 120, 40, BLUE);  // SOL UST
 	// Hollow Rectangle (Start X, Start Y, End X, End Y)
   	ILI9341_DrawFilledRectangleCoord(200, 100, 280,140, YELLOW); // SAG UST

   	HAL_Delay(100);

  	while(1){
  		touchX = getX();
  		touchY = getY();

 		if(touchX>160 && touchX != 0){
			ILI9341_DrawText("Dogru", FONT4, 130, 120, BLACK, WHITE);
 			HAL_Delay(150);
			score+=1;
			break;
		}
		if(touchX<160 && touchX != 0){
		    ILI9341_DrawText("Yanlis", FONT4, 130, 120, BLACK, WHITE);
		    HAL_Delay(150);
	        break;
		}

  	}

  	ILI9341_FillScreen(RED);
  	// Horizontal Line (X, Y, Length, Color)
  	ILI9341_DrawHLine(0, 120, 320, WHITE);
  	// Vertical Line (X, Y, Length, Color)
  	ILI9341_DrawVLine(160, 0, 240, WHITE);

  	// Hollow Circle (Centre X, Centre Y, Radius, Color)
  	ILI9341_DrawFilledCircle(80, 60, 40, BLUE);  // SOL UST

  	// Hollow Rectangle (Start X, Start Y, End X, End Y)
  	ILI9341_DrawFilledRectangleCoord(200, 40, 280, 80, YELLOW); // SAG UST

  	// Hollow Circle (Centre X, Centre Y, Radius, Color)
  	ILI9341_DrawHollowCircle(80,180, 40, NAVY);  // SOL ALT

  	// Hollow Rectangle (Start X, Start Y, End X, End Y)
   	ILI9341_DrawHollowRectangleCoord(200, 160, 280, 200, ORANGE); // SAG ALT
}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI1_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
  XPT2046_Init();


  char buf[20],buf2[20];


  ILI9341_FillScreen(WHITE);
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
  ILI9341_DrawText("ESLESTIRME OYUNU", FONT4, 60, 110, BLACK, WHITE);  // Simple Text writing (Text, Font, X, Y, Color, BackColor)
  HAL_Delay(1000);

  ILI9341_FillScreen(RED);
  // Horizontal Line (X, Y, Length, Color)
  ILI9341_DrawHLine(0, 120, 320, WHITE);
  // Vertical Line (X, Y, Length, Color)
  ILI9341_DrawVLine(160, 0, 240, WHITE);

  // Hollow Circle (Centre X, Centre Y, Radius, Color)
  ILI9341_DrawFilledCircle(80, 60, 40, BLUE);  // SOL UST

  // Hollow Rectangle (Start X, Start Y, End X, End Y)
  ILI9341_DrawFilledRectangleCoord(200, 40, 280, 80, YELLOW); // SAG UST

  // Hollow Circle (Centre X, Centre Y, Radius, Color)
  ILI9341_DrawHollowCircle(80,180, 40, NAVY);  // SOL ALT

  // Hollow Rectangle (Start X, Start Y, End X, End Y)
  ILI9341_DrawHollowRectangleCoord(200, 160, 280, 200, ORANGE); // SAG ALT

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  touchX = getX();
	  touchY = getY();

	  sprintf(buf,"x=%3d y=%3d", touchX,touchY);
	  sprintf(buf2,"score=%3d", score);

	  ILI9341_DrawText(buf, FONT4, 10, 10, BLACK, WHITE);
	  ILI9341_DrawText(buf2, FONT4, 200, 10, BLACK, WHITE);
	  HAL_Delay(10);

	  if(touchX<160 && touchX>0 && touchY<120 && touchY>0){
		  ILI9341_DrawText("sol ust", FONT4, 130, 120, BLACK, WHITE);
		  FirstRegion();
		  touchX = 0;
		  touchY = 0;
	  }
	  if(touchX<320 && touchX>160 && touchY<120 && touchY>0){
	  	  ILI9341_DrawText("sag ust", FONT4, 130, 120, BLACK, WHITE);
	  	  SecondRegion();
		  touchX = 0;
		  touchY = 0;
	  }
	  if(touchX<160 && touchX>0 && touchY<240 && touchY>120){
	  	  ILI9341_DrawText("sol alt", FONT4, 130, 120, BLACK, WHITE);
	  	  ThirdRegion();
		  touchX = 0;
		  touchY = 0;
	  }
	  if(touchX<320 && touchX>160 && touchY<240 && touchY>120){
		  ILI9341_DrawText("sag alt", FONT4, 130, 120, BLACK, WHITE);
		  FourthRegion();
		  touchX = 0;
		  touchY = 0;
	  }
	  else{
		  while(0);
	  }

  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
